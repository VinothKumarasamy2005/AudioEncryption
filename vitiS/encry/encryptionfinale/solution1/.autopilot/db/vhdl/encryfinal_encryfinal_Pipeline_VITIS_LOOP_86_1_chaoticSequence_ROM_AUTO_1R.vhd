-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity encryfinal_encryfinal_Pipeline_VITIS_LOOP_86_1_chaoticSequence_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 64; 
             AddressWidth     : integer := 4; 
             AddressRange    : integer := 16
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of encryfinal_encryfinal_Pipeline_VITIS_LOOP_86_1_chaoticSequence_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0011111101101101011111011011111101001000011111111100101110010010", 1 => "0011111110001010001101101110001011101011000111000100001100101101", 2 => "0011111110000011110111011001011111110110001010110110101011101000", 3 => "1011111101100000011000100100110111010010111100011010100111111100", 
    4 => "0011111101111100010011111100000111011111001100110000000011011110", 5 => "0011111110010001011000110001110100010011100010001011010001001010", 6 => "0011111110000011010001010100010001110011010001011001111010100101", 7 => "1011111101110000001111001000111000100101110010000001000010100110", 
    8 => "0011111110000101100101000001010110001000101100000011000000101010", 9 => "0011111110010111011011011000111001111011010001001111101101000000", 10 => "0011111110000010101100011110001001111010101011000010101100010010", 11 => "1011111101111000001001010011101011001101000001011000000111001011", 
    12 => "0011111110001110101011011010011110010001100000111011010100000010", 13 => "0011111110011111110001100000000000000101011001001101111110110011", 14 => "0011111110000010001000111001001001101110000001111010000101101011", 15 => "1011111101111111111001111110011001100110111101011011000111111011");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

