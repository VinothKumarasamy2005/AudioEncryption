import numpy as np
import matplotlib.pyplot as plt
import scipy.io.wavfile as wav
import pywt

# ---------------------------------------------------------------------------------
# Load Speech Signal
def load_audio(filename):
    try:
        rate, data = wav.read(filename)
        if data.ndim > 1:
            data = data[:, 0]  # Convert stereo to mono
        return rate, data.astype(float) / np.max(np.abs(data))  # Normalize
    except Exception as e:
        print("Error loading audio:", e)
        return None, None

# ---------------------------------------------------------------------------------
# Generate Chen's Hyperchaotic Sequence (Fixed)
def generate_chen_chaos(length, dt=0.001):
    alpha, sigma, gamm, beta, epsilon = 36.0, 16.0, 28.0, 3.0, 0.2
    x, y, z, w = 0.1, 0.1, 0.1, 0.1
    chaos_seq = np.zeros(length)

    for i in range(length):
        dx = alpha * (y - x)
        dy = sigma * x - x * z + gamm * y - w
        dz = x * y - beta * z
        dw = x - epsilon

        # Update values with small time step
        x += dx * dt
        y += dy * dt
        z += dz * dt
        w += dw * dt

        # Apply constraints to prevent overflow
        x, y, z, w = np.clip([x, y, z, w], -50, 50)

        chaos_seq[i] = x

    chaos_seq /= np.max(np.abs(chaos_seq))  # Normalize
    return np.nan_to_num(chaos_seq)

# ---------------------------------------------------------------------------------
# Haar DWT
def haar_dwt(signal):
    coeffs = pywt.wavedec(signal, 'haar', level=1)
    return np.nan_to_num(np.concatenate(coeffs))  # Avoid NaN

# ---------------------------------------------------------------------------------
# Encryption Process
def encrypt_speech(signal):
    dwt_signal = haar_dwt(signal)
    chaos_seq = generate_chen_chaos(len(dwt_signal))

    if len(dwt_signal) != len(chaos_seq):
        return np.array([])

    encrypted_signal = dwt_signal * chaos_seq
    return np.nan_to_num(encrypted_signal / np.max(np.abs(encrypted_signal)))  # Normalize

# ---------------------------------------------------------------------------------
# Histogram Plotting
def plot_histograms(original_signal, encrypted_signal):
    plt.figure(figsize=(12, 5))

    # Histogram of the Original Signal
    plt.subplot(1, 2, 1)
    plt.hist(original_signal, bins=50, color='blue')
    plt.xlabel("Amplitude")
    plt.ylabel("Count")
    plt.title("(a) Original")

    # Histogram of the Encrypted Signal
    plt.subplot(1, 2, 2)
    plt.hist(encrypted_signal, bins=50, color='blue')
    plt.xlabel("Amplitude")
    plt.ylabel("Count")
    plt.title("(b) Encrypted")

    plt.suptitle("Histogram Analysis of Speech Signal Encryption")
    plt.tight_layout()
    plt.show()

# ---------------------------------------------------------------------------------
# Run the Analysis
filename = r"C:\Users\Kavinesh\Downloads\speech-94649.wav"
rate, original_signal = load_audio(filename)

if original_signal is not None:
    subset_length = len(original_signal) // 2
    encrypted_signal = encrypt_speech(original_signal[:subset_length])

    if len(encrypted_signal) > 0:
        plot_histograms(original_signal[:subset_length], encrypted_signal)
    else:
        print("Encryption failed!")
else:
    print("Failed to load audio.")